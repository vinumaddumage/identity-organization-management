openapi: 3.0.0
info:
  version: "v1"
  title: 'WSO2 Identity Server - Organization Management API Definition'
  description: 'This document specifies a **Organization Management RESTful API** for **WSO2 Identity Server**.'
  contact:
    name: WSO2
    url: 'http://wso2.com/products/identity-server/'
    email: iam-dev@wso2.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://{server-url}/t/{tenant-domain}/api/identity/organization-mgt/v1.0'
    variables:
      server-url:
        default: 'localhost:9443'
      tenant-domain:
        default: carbon.super
security:
  - OAuth2: [ ]
  - BasicAuth: [ ]

paths:
  /organizations:
    post:
      tags:
        - Organization
      description:
        This API is used to create the organization defined in the user input.
      summary:
        Create a new organization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationPOSTRequest'
        description: This represents the organization to be added.
        required: true
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Location of the newly created organization.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      description:
        This API is used to search and retrieve organizations created for this tenant.
      summary:
        Retrieve organizations created for this tenant which matches the defined search criteria, if any.
      parameters:
        - $ref: '#/components/parameters/filterQueryParam'
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/afterQueryParam'
        - $ref: '#/components/parameters/beforeQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
      tags:
        - Organization

  /organizations/{organization-id}:
    get:
      description:
        This API is used to get an existing organization identified by the organization ID.
      summary:
        Get an existing organization, identified by the organization ID.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/showChildrenQueryParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization
    patch:
      description:
        This API provides the capability to update an organization property
        using patch request. Organization patch is supported only for key-value pairs.
      summary:
        Patch an organization property by ID. Patch is supported only for
        key-value pairs.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization to be patched.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationPatchRequest'
        required: true
      responses:
        204:
          description: Ok
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization
    put:
      description:
        This API provides the capability to update an organization by its id.
      summary:
        Update an organization by ID.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization to be updated.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationPUTRequest'
        required: true
      responses:
        204:
          description: Ok
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization
    delete:
      description:
        This API provides the capability to delete an organization by
        giving its ID.
      summary:
        Delete an organization by using the organization's ID.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization
  /organizations/{organization-id}/applications/{application-id}/share:
    post:
      summary: |
        Share application from the parent tenant to given organization
      description: |
        This API creates an internal application to delegate access from
      operationId: shareOrgApplication
      parameters:
        - name: organization-id
          in: path
          description: ID of the parent organization where the application is created.
          required: true
          schema:
            type: string
        - name: application-id
          in: path
          description: ID of the application which will be shared to child orgs.
          required: true
          schema:
            type: string
      requestBody:
        description: This represents user role mappings.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSharedDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization Application Management

  /organizations/{organization-id}/roles:
    post:
      summary: |
        Create a user role mapping for an organization.
      description: |
        This API is used to create user role mappings for an organization.
      parameters:
        - name: organization-id
          in: path
          description: 'ID of the organization which the user-role mappings are added.'
          required: true
          schema:
            type: string
      requestBody:
        description: This represents user role mappings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleMappingDTO'
        required: true
      responses:
        201:
          description: Created
          content: { }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization Role Management

  /organizations/{organization-id}/roles/{role-id}/users:
    get:
      summary: |
        Retrieve the list of users who have specific role against an organization.
      description: |
        This API  is used to get the user list of an organization with a specific role.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization which, the users will be returned.
          required: true
          schema:
            type: string
        - name: role-id
          in: path
          description: ID of the role which, the user will be returned.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Number of items to be skipped before starting to collect the result set. (Should be 0 or positive)
          schema:
            type: integer
        - name: limit
          in: query
          description: Max number of items to be returned. (Should be greater than 0)
          schema:
            type: integer
        - name: attributes
          in: query
          description: Comma separated list of SCIM user attributes to be returned in the response.
          schema:
            type: string
        - name: filter
          in: query
          description: SCIM filtering to fine tune the search results. Supported operations are 'eq', 'co', 'sw', 'ew', and 'and'.
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization Role Management

  /organizations/{organization-id}/roles/{role-id}/users/{user-id}:
    delete:
      summary: |
        Delete an organization user role mapping
      description: |
        This API is used to delete user role mappings for an organization.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization of which, the user role mappings will be deleted.
          required: true
          schema:
            type: string
        - name: role-id
          in: path
          description: ID of the role of which, the user will be deleted.
          required: true
          schema:
            type: string
        - name: user-id
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
        - name: includeSubOrganizations
          in: query
          description: The deletion should proceed to sub orgs or not.
          schema:
            type: boolean
      responses:
        204:
          description: No Content
          content: { }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization Role Management
    patch:
      summary: |
        Update an organization user role mapping.
      description: |
        This API is used to update the inheritance of a user role assigned over an organization.
        This will allow to change the includeSubOrganizations property of the role mapping.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization of which, the user role mappings will be updated.
          required: true
          schema:
            type: string
        - name: role-id
          in: path
          description: ID of the role of which, the user will be updated.
          required: true
          schema:
            type: string
        - name: user-id
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      requestBody:
        description: This represents the patch operation.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRoleOperationDTO'
        required: true
      responses:
        204:
          description: Ok
          content: { }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization Role Management

  /organizations/{organization-id}/users/{user-id}/roles:
    get:
      summary: |
        Retrive the list of roles that a particular user has against an organization.
      description: |
        This API is used to get the list of roles for a user for an organization.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization of which, the users will be returned.
          required: true
          schema:
            type: string
        - name: user-id
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      tags:
        - Organization Role Management

components:
  parameters:
    filterQueryParam:
      in: query
      name: filter
      required: false
      description:
        Condition to filter the retrieval of records.
      schema:
        type: string
    limitQueryParam:
      in: query
      name: limit
      required: false
      description:
        Maximum number of records to be returned. (Should be greater than 0)
      schema:
        type: integer
        format: int32
        minimum: 0
    beforeQueryParam:
      in: query
      name: before
      required: false
      description:
        Points to the previous range of data that can be retrieved.
      schema:
        type: string
    afterQueryParam:
      in: query
      name: after
      required: false
      description:
        Points to the next range of data to be returned.
      schema:
        type: string
    showChildrenQueryParam:
      in: query
      name: showChildren
      required: false
      description:
        Returns the organization details along with the child organization IDs belonging to this organization.
      schema:
        type: boolean
        default: false

  schemas:
    #-----------------------------------------------------
    # Error Response object
    #-----------------------------------------------------
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: ORG-00000
          description: An error code.
        message:
          type: string
          example: Some Error Message
          description: An error message.
        description:
          type: string
          example: Some Error Description
          description: An error description.
        traceId:
          type: string
          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047
          description: An error trace identifier.

    OrganizationPOSTRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: "ABC Builders"
        description:
          type: string
          example: "Building constructions"
        type:
          type: string
          example: "TENANT"
          enum:
            - TENANT
            - STRUCTURAL
        domain:
          type: string
          example: "abc.com"
          description: Defines the tenant domain. This attribute should only be present for tenant type organization.
        parentId:
          type: string
          example: "b4526d91-a8bf-43d2-8b14-c548cf73065b"
          description: "If the parentId is not present, the ROOT will be taken as the parent organization."
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
    OrganizationPUTRequest:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          example: "ABC Builders"
        description:
          type: string
          example: "Building constructions"
        status:
          type: string
          enum: [ACTIVE, DISABLED]
          example: ACTIVE
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
    Attribute:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
          example: "Country"
        value:
          type: string
          example: "Sri Lanka"
    OrganizationsResponse:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          example:
            [
              {
                "href": "/t/carbon.super/api/identity/organization-mgt/v1.0?limit=10&filter=name+co+der&next=MjAyMS0xMi0yMSAwNToxODozMS4wMDQzNDg=",
                "rel": "next",
              },  {
                "href": "/t/carbon.super/api/identity/organization-mgt/v1.0?limit=10&filter=name+co+der&before=MjAyMS0xMi0yMSAwNToxODozMS4wMDQzNDg=",
                "rel": "previous",
              }
            ]
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/BasicOrganizationResponse'
    Link:
      type: object
      properties:
        href:
          type: string
          format: uri
          description: Endpoint that will return the next or previous page of data.
        rel:
          type: string
          description: Describes whether the provided link is to access the next or previous page of data.
      readOnly: true
    BasicOrganizationResponse:
      type: object
      required:
        - id
        - name
        - ref
      properties:
        id:
          type: string
          example: 'b4526d91-a8bf-43d2-8b14-c548cf73065b'
        name:
          type: string
          example: 'ABC Builders'
        ref:
          type: string
          example: 't/carbon.super/api/identity/organization-mgt/v1.0/b4526d91-a8bf-43d2-8b14-c548cf73065b'
    OrganizationResponse:
      type: object
      required:
        - id
        - name
        - status
        - created
        - lastModified
      properties:
        id:
          type: string
          example: '06c1f4e2-3339-44e4-a825-96585e3653b1'
        name:
          type: string
          example: 'ABC Builders'
        description:
          type: string
          example: 'Building constructions'
        status:
          type: string
          enum: [ACTIVE, DISABLED]
          example: ACTIVE
        created:
          type: string
          example: '2021-10-25T12:31:53.406Z'
        lastModified:
          type: string
          example: '2021-10-25T12:31:53.406Z'
        type:
          type: string
          example: "TENANT"
          enum:
            - TENANT
            - STRUCTURAL
        domain:
          type: string
          example: "abc.com"
          description: Defines the domain of tenant type organization.
        parent:
          $ref: '#/components/schemas/ParentOrganization'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
    GetOrganizationResponse:
      type: object
      required:
        - id
        - name
        - status
        - created
        - lastModified
      properties:
        id:
          type: string
          example: '06c1f4e2-3339-44e4-a825-96585e3653b1'
        name:
          type: string
          example: 'ABC Builders'
        description:
          type: string
          example: 'Building constructions'
        status:
          type: string
          enum: [ACTIVE, DISABLED]
          example: ACTIVE
        created:
          type: string
          example: '2021-10-25T12:31:53.406Z'
        lastModified:
          type: string
          example: '2021-10-25T12:31:53.406Z'
        type:
          type: string
          example: "TENANT"
          enum:
            - TENANT
            - STRUCTURAL
        domain:
          type: string
          example: "abc.com"
          description: Defines the tenant domain of tenant type organization.
        parent:
          $ref: '#/components/schemas/ParentOrganization'
        children:
          type: array
          items:
            $ref: '#/components/schemas/ChildOrganization'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
    #-----------------------------------------------------
    # Organization Parent Object
    #-----------------------------------------------------
    ParentOrganization:
      type: object
      required:
        - id
        - ref
      properties:
        id:
          type: string
          example: 'b4526d91-a8bf-43d2-8b14-c548cf73065b'
        ref:
          type: string
          example: 't/carbon.super/api/identity/organization-mgt/v1.0/b4526d91-a8bf-43d2-8b14-c548cf73065b'
    #-----------------------------------------------------
    # Organization Child Object
    #-----------------------------------------------------
    ChildOrganization:
      type: object
      required:
        - id
        - ref
      properties:
        id:
          type: string
          example: 'd8f9780e-3a9a-4ae0-8d94-1a2d1aa3ec14'
        ref:
          type: string
          example: 't/carbon.super/api/identity/organization-mgt/v1.0/d8f9780e-3a9a-4ae0-8d94-1a2d1aa3ec14'

    #-----------------------------------------------------
    # Organization Patch Operation Object
    #-----------------------------------------------------
    OrganizationPatchRequest:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationPatchRequestItem'
    OrganizationPatchRequestItem:
      description: A JSONPatch as defined by RFC 6902. Patch operation is supported only for root level attributes of an organization.
      required:
        - operation
        - path
      properties:
        operation:
          type: string
          description: The operation to be performed.
          enum:
            - ADD
            - REMOVE
            - REPLACE
          example: REPLACE
        path:
          type: string
          description: A JSON-Pointer
          example: '/name'
        value:
          type: string
          description: The value to be used within the operations.
          example: 'XYZ Builders'
    #-----------------------------------------------------
    # User Role Mapping object
    #-----------------------------------------------------
    UserRoleMappingDTO:
      required:
        - roleId
      type: object
      properties:
        roleId:
          type: string
          example: 7d4e3ac9-da93-4b7a-a2d0-84bb6c01dc25
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleMappingUsersDTO'

    #-----------------------------------------------------
    # User Role Mapping Users Object
    #-----------------------------------------------------
    UserRoleMappingUsersDTO:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          example: c4c3a320-e381-463a-846f-1c2bd083d38c
        forced:
          type: boolean
          example: true
        includeSubOrganizations:
          type: boolean
          example: true

    #-----------------------------------------------------
    # User object
    #-----------------------------------------------------
    UserDTO:
      type: object
      required:
        - id
        - username
      properties:
        username:
          type: string
          example: PRIMARY/Lia
        id:
          type: string
          example: 008bba85-451d-414b-87de-c03b5a1f4217
        name:
          $ref: '#/components/schemas/UserNameDTO'
        assignedMeta:
          type: array
          example:
            - forced: true
              assignedAt:
                orgId: b4526d91-a8bf-43d2-8b14-c548cf73065b
                orgName: WSO2
            - forced: false
              assignedAt:
                orgId: c4526761-a8bf-43d2-8b14-c548cf7306fc
                orgName: WSO2BR
          items:
            $ref: '#/components/schemas/UserAssignedMetaDTO'

    #-----------------------------------------------------
    # Username Object
    #-----------------------------------------------------
    UserNameDTO:
      type: object
      properties:
        givenName:
          type: string
          example: Lia
        familyName:
          type: string
          example: Greene

    #-----------------------------------------------------
    # User AssignedMeta Object
    #-----------------------------------------------------
    UserAssignedMetaDTO:
      type: object
      properties:
        forced:
          type: boolean
        assignedAt:
          $ref: '#/components/schemas/UserAssignedAtDTO'

    #-----------------------------------------------------
    # User AssignedAt Object
    #-----------------------------------------------------
    UserAssignedAtDTO:
      type: object
      properties:
        orgId:
          type: string
          example: b4526d91-a8bf-43d2-8b14-c548cf73065b
        orgName:
          type: string
          example: WSO2
    #-----------------------------------------------------
    # Application shared object
    #-----------------------------------------------------
    ApplicationSharedDTO:
      type: object
      properties:
        status:
          type: string
          example: 'Success'

    #-----------------------------------------------------
    # Role object
    #-----------------------------------------------------
    RoleDTO:
      required:
        - roleId
        - roleName
      type: object
      properties:
        roleId:
          type: string
          example: 7d4e3ac9-da93-4b7a-a2d0-84bb6c01dc25
        roleName:
          type: string
          example: Internal/User_Administrator
    #-----------------------------------------------------
    # User Role Operation object
    #-----------------------------------------------------
    UserRoleOperationDTO:
      required:
        - op
        - path
        - value
      type: object
      properties:
        op:
          type: string
          example: replace
        path:
          type: string
          example: /includeSubOrganizations
        value:
          type: boolean
          example: false
  #--------------------------------------------------------
  # Descriptions of Organization Management API responses.
  #--------------------------------------------------------
  responses:
    BadRequest:
      description: Invalid input in the request.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Requested resource is not found.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication information is missing or invalid.
    Forbidden:
      description: Access forbidden.
    Conflict:
      description: Conflict response.
    ServerError:
      description: Internal server error.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: Not Implemented.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
  #-----------------------------------------------------
  # Applicable authentication mechanisms.
  #-----------------------------------------------------
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://localhost:9443/oauth2/authorize'
          tokenUrl: 'https://localhost:9443/oauth2/token'
          scopes: { }
